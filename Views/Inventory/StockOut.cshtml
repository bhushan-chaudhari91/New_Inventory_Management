@using InventoryManagement.ViewModels;
@model StockOutViewModel


<style>
    .autocomplete-list {
        position: absolute;
        z-index: 1000;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .autocomplete-list li {
            padding: 8px 12px;
            cursor: pointer;
        }

            .autocomplete-list li:hover {
                background: #f0f0f0;
            }

            .autocomplete-list li.highlighted {
                background-color: #007bff;
                color: white;
            }

</style>

<div>
    <div class="row" style="margin-top: -35px; margin-left: -20px;">
        <div class="col-md-12 grid-margin stretch-card">
            <div>
                <div class="card-body">
                   
                    <div class="row" style="margin-bottom: -25px;">
                        <div class="col-md-12 grid-margin">
                            <div class="d-flex justify-content-between flex-wrap">
                                <div class="d-flex align-items-end flex-wrap">
                                    <div class="mr-md-3 mr-xl-5">
                                        <h2>Stock Out</h2>

                                    </div>

                                </div>
                                <div class="d-flex justify-content-between align-items-end flex-wrap">

                                    @* <button class="btn btn-primary mt-2 mt-xl-0" data-bs-toggle="modal" data-bs-target="#excelUploadModal">Upload Excel</button> *@

                                </div>
                            </div>
                            <hr />
                        </div>
                    </div>

                    <form asp-action="StockOut" method="post" id="stockForm" class="forms-sample">

                        <div class="row">

                            @* <div class="col-md-2">
                                <div class="form-group">
                                    <label for="barcodeNo">Barcode/ Serial No.</label>
                                    <input type="text" class="form-control" id="barcodeNo" placeholder="BarcodeNo" autofocus>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="product">Product Name</label>
                                    <select asp-for="FkProductId" class="form-control" id="product" asp-items="Model.ProductList" disabled>
                                        <option value="">Select Product</option>
                                    </select>
                                </div>
                            </div> *@

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="barcodeNo">Barcode</label>
                                    <input asp-for="SKUName" type="text" class="form-control" id="barcodeNo" placeholder="barcode" />
                                    <ul id="skuList" class="autocomplete-list" style="display: none;"></ul>
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="product">Product</label>
                                    <input type="text" class="form-control" id="product" placeholder="ProductName" />
                                    <input type="hidden" id="FkProductId" name="FkProductId" />
                                    <ul id="productList" class="autocomplete-list" style="display: none;"></ul>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="reason">Reason</label>
                                    <select class="form-control" id="reason">
                                        <option value="1">Sold</option>
                                        <option value="2">Return</option>
                                        <option value="3">Damage</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="getStockInQuantity">Total Quantity</label>
                                    <input type="text" class="form-control" id="getStockInQuantity" placeholder="StockInQuantity" readonly>
                                </div>
                            </div>


                           @*  <div class="col-md-2">
                                <div class="form-group">
                                    <label for="warehouse">Room / Warehouse</label>
                                    <select asp-for="FkWarehouseId" class="form-control" id="warehouse" asp-items="Model.WarehouseList">
                                       
                                    </select>
                                </div>
                            </div> *@

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="warehouse">Room / Warehouse</label>
                                    <select asp-for="FkWarehouseId" class="form-control" id="warehouse">
                                        @foreach (var item in Model.WarehouseList)
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-3">
                                <div class="form-group">
                                    <label for="rackNo">Rack No</label>
                                    <select asp-for="RackNo" class="form-control" id="rackNo">
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="availableQuantity">Available Quantity</label>
                                    <input type="text" id="availableQuantity" class="form-control" readonly />
                                </div>
                            </div>


                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="productQuantity">Stock Out Quantity</label>
                                    <input type="number" class="form-control" id="productQuantity" value="1" placeholder="Quantity" min="1" step="1" oninput="this.value = this.value.replace(/[^0-9]/g, '')">
                                    <small id="quantityError" style="color: red;"></small>
                                </div>
                            </div>

                           @*  <div class="col-md-2">
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary mr-2" style="margin-top: 32px;" id="addButton">+ Add</button>
                                </div>
                            </div> *@

                        </div>



                        <!-- Added Table -->
                        <div class="table-responsive mt-4" style="padding-bottom: 25px;">
                            <table class="table-container" id="stockOutTable">
                                <thead>
                                    <tr>
                                        <th>Sr.No</th>
                                        <th>Barcode Id</th>
                                        <th>Product Name</th>
                                        <th>Product Quantity</th>
                                        <th>Reason</th>
                                        <th>Room / Warehouse</th>
                                        <th>Rack No</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>


                        <button type="button" class="btn btn-primary mr-2" id="saveStock">Save</button>
                        <button asp-controller="Inventory" asp-action="InventoryList" class="btn btn-light">Cancel</button>
                    </form>
                </div>
            </div>
        </div>


        <!-- Modal For Choose Excel File -->
        <div class="modal fade" id="excelUploadModal" tabindex="-1" aria-labelledby="excelUploadModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title" id="excelUploadModalLabel">Upload Excel File</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
                    </div>

                    <div class="modal-body">
                        <input type="file" id="excelFile" accept=".xls,.xlsx" class="form-control" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" onclick="saveExcelFile()">Save</button>
                    </div>

                </div>
            </div>
        </div>


    </div>
</div>


@* <script>
    document.getElementById('productQuantity').addEventListener('input', function () {
        const enteredQuantity = parseInt(this.value);
        const stockValue = parseInt(document.getElementById('getStockInQuantity').value);
        const errorDiv = document.getElementById('quantityError');

        if (!isNaN(enteredQuantity) && !isNaN(stockValue) && enteredQuantity > stockValue) {
            errorDiv.textContent = `Quantity can't be more than available stock (${stockValue}).`;
        } else {
            errorDiv.textContent = '';
        }
    });
</script> *@


<script>
    document.getElementById('productQuantity').addEventListener('input', function () {
        const enteredQuantity = parseInt(this.value);
        const stockValue = parseInt(document.getElementById('availableQuantity').value);
        const errorDiv = document.getElementById('quantityError');

        if (!isNaN(enteredQuantity) && !isNaN(stockValue) && enteredQuantity > stockValue) {
            errorDiv.textContent = `Quantity can't be more than available stock (${stockValue}).`;
        } else {
            errorDiv.textContent = '';
        }
    });
</script>



@*Start Code for click on AddButton so that time textbox data add in html Table 30/05/2025 *@
@* <script>
    let serialNumber = 1;

    document.getElementById('addButton').addEventListener('click', function(e) {
        e.preventDefault();
        const barcodeNo = document.getElementById('barcodeNo').value;
        const productId = document.getElementById('product').value;
        const productText = document.getElementById('product').options[document.getElementById('product').selectedIndex].text;
        const productQuantity = document.getElementById('productQuantity').value;
        const reason = document.getElementById('reason').options[document.getElementById('reason').selectedIndex].text;
        const warehouseId = document.getElementById('warehouse').value;
        const warehouseText = document.getElementById('warehouse').options[document.getElementById('warehouse').selectedIndex].text;
        const stockInQuantity = parseInt(document.getElementById('availableQuantity').value);
        
        if (!barcodeNo || !productId || !productQuantity || !reason || !warehouseId) {
            alert("Please fill all required fields.");
            return;
        }
        
         if (productQuantity > stockInQuantity) {
            alert(`Quantity cannot exceed available stock of ${stockInQuantity}.`);
            return;
        }

        const table = document.getElementById('stockOutTable').getElementsByTagName('tbody')[0];
        const newRow = table.insertRow();

        newRow.insertCell(0).textContent = serialNumber++;
        newRow.insertCell(1).textContent = barcodeNo;
        newRow.insertCell(2).textContent = productText;
        newRow.insertCell(3).textContent = productQuantity;
        newRow.insertCell(4).textContent = reason;
        newRow.insertCell(5).textContent = warehouseText;

        const removeCell = newRow.insertCell(6);
        const removeButton = document.createElement('button');
        removeButton.textContent = 'Remove';
        removeButton.className = 'btn btn-danger btn-sm';
        removeButton.onclick = function() {
            table.deleteRow(newRow.rowIndex - 1);
            updateSerialNumbers();
        };
        removeCell.appendChild(removeButton);

         newRow.dataset.productId = productId;
         newRow.dataset.reason = reason;
         newRow.dataset.warehouseId = warehouseId;

        document.getElementById('stockForm').reset();
    });

    function updateSerialNumbers() {
        const table = document.getElementById('stockOutTable');
        const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
        serialNumber = 1;
        for (let i = 0; i < rows.length; i++) {
            rows[i].cells[0].textContent = serialNumber++;
        }
    }
</script> *@
@*End Code for click on AddButton so that time textbox data add in html Table 30/05/2025 *@

<script>
    document.getElementById('saveStock').addEventListener('click', function () {
        const rows = document.querySelectorAll("#stockOutTable tbody tr");
        const stockData = [];

        if (rows.length === 0) {
            alert("No items to save.");
            return;
        }

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");

            const stockItem = {
                Barcode: cells[1].textContent.trim(),
                FkProductId: row.dataset.productId,
                Reason: row.dataset.reason,
                // Quantity: cells[3].textContent.trim(),
                Quantity: cells[3].querySelector('input.quantity-input').value.trim(),
                FkWarehouseId: row.dataset.warehouseId,
                RackNo: row.dataset.rackNo
            };

            stockData.push(stockItem);
        });

        fetch("/Inventory/StockOut", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(stockData)
        })
        .then(response => {
            if (response.ok) {
                // alert("Records saved successfully!");
                // location.reload();
                 window.location.href = "/Inventory/InventoryList";
            } else {
                alert("Failed to save records.");
            }
        })
        .catch(error => {
            console.error("Error:", error);
            alert("An error occurred while saving.");
        });
    });
</script>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

@*Start Code for Enter the BarcodeNo and Press Tab Button So that time details show in textbox 30/05/2025 *@

@* <script>

    $(document).ready(function () {
        $('#barcodeNo').on('blur', function () {
            var barcode = $(this).val();
            if (barcode.trim() !== '') {
                $.ajax({
                    url: '/Inventory/GetProductByBarcode', 
                    type: 'GET',
                    data: { barcode: barcode },
                    success: function (response) {
                        if (response) {
                            $('#product').val(response.fkSupplierId);
                            $('#getStockInQuantity').val(response.stockInQuantity);

                            var $warehouseDropdown = $('#warehouse');
                            $warehouseDropdown.empty(); 
                            // $warehouseDropdown.append('<option value="">Select Warehouse</option>');

                            $.each(response.warehouseName, function (index, warehouse) {
                                $warehouseDropdown.append(
                                    $('<option></option>').val(warehouse.id).text(warehouse.name)
                                );
                            });

                            var firstWarehouseId = response.warehouseName[0].id;
                            $warehouseDropdown.val(firstWarehouseId).trigger('change');

                        } else {
                            // alert("No record found for this Barcode.");
                            alert("Please enter barcode in correct format (case-sensitive).");
                        }
                    },
                    error: function () {
                        alert('Something went wrong.');
                    }
                });
            }
        });

        $('#warehouse').on('change', function () {
        var selectedWarehouseId = $(this).val();
        var barcode = $('#barcodeNo').val();

        if (selectedWarehouseId && barcode.trim() !== '') {
            $.ajax({
                url: '/Inventory/GetAvailableQuantity',
                type: 'GET',
                data: {
                    barcode: barcode,
                    warehouseId: selectedWarehouseId
                },
                success: function (quantity) {
                    $('#availableQuantity').val(quantity);
                },
                error: function () {
                    alert('Failed to get available quantity.');
                    $('#availableQuantity').val('');
                }
            });
        } else {
            $('#availableQuantity').val('');
        }
    });
    });
</script> *@

@*End Code for Enter the BarcodeNo and Press Tab Button So that time details show in textbox 30/05/2025 *@






<script>
    let serialNumber = 1;

    $(document).ready(function () {
        var $productInput = $('#product');
        var $productList = $('#productList');
        var $productId = $('#FkProductId');
        var $skuInput = $('#barcodeNo');
        var $warehouseDropdown = $('#warehouse');
        var $rackNoDropdown = $('#rackNo');
        var $availableQuantity = $('#availableQuantity');
        var $productQuantity = $('#productQuantity');
        var selectedIndex = -1;

        // Load rack numbers for barcode scan using warehouseQuantities
        function loadRackNos(sku, warehouseId, warehouseQuantities = null) {
            if (warehouseId && sku && warehouseQuantities) {
                // Use warehouseQuantities from GetProductByBarcodeInStockOut
                const racksForWarehouse = warehouseQuantities
                    .filter(q => q.warehouseId == warehouseId && q.totalQuantity > 0)
                    .map(q => q.rackNo);
                const currentRack = $rackNoDropdown.val(); // Preserve current selection
                $rackNoDropdown.empty();
                if (racksForWarehouse.length === 0) {
                    $rackNoDropdown.append('<option value="">No Racks Found</option>');
                } else {
                    $rackNoDropdown.append('<option value="">Select Rack</option>');
                    $.each(racksForWarehouse, function (index, rack) {
                        $rackNoDropdown.append(`<option value="${rack}">${rack}</option>`);
                    });
                    // Restore previous selection if still valid
                    if (currentRack && racksForWarehouse.includes(currentRack)) {
                        $rackNoDropdown.val(currentRack);
                    }
                }
            } else {
                $rackNoDropdown.empty().append('<option value="">Select Warehouse First</option>');
            }
        }

        // Barcode input handling (Enter key or scan)
        $skuInput.on('keydown', function (e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                const barcode = $(this).val().trim();
                if (barcode === '') return;

                $.ajax({
                    url: '/Inventory/GetProductByBarcodeInStockOut',
                    type: 'GET',
                    data: { sku: barcode },
                    success: function (data) {
                        if (data && data.productId && data.warehouseQuantities && data.warehouseQuantities.length > 0) {
                            $productInput.val(data.productName);
                            $productId.val(data.productId);
                            $skuInput.val(data.skuName);
                            $('#getStockInQuantity').val(data.stockInQuantity);

                            const currentSelectedWarehouse = $warehouseDropdown.val();
                            let selectedWarehouseId = currentSelectedWarehouse;
                            let selectedQty = 0;

                            // Filter warehouseQuantities to only include those with stock
                            const validWarehouses = data.warehouseQuantities.filter(q => q.totalQuantity > 0);

                            if (!currentSelectedWarehouse || currentSelectedWarehouse === '' || !validWarehouses.some(q => q.warehouseId == currentSelectedWarehouse)) {
                                if (validWarehouses.length > 0) {
                                    // Select the first warehouse with stock if none is selected or current is invalid
                                    selectedWarehouseId = validWarehouses[0].warehouseId;
                                    $warehouseDropdown.val(selectedWarehouseId).trigger('change'); // Trigger Razor view script
                                    selectedQty = validWarehouses[0].totalQuantity;
                                } else {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'No Stock Available',
                                        text: 'No available quantity for this barcode in any warehouse.',
                                        confirmButtonColor: '#3085d6',
                                        confirmButtonText: 'OK'
                                    });
                                    resetForm();
                                    return;
                                }
                            } else {
                                selectedQty = data.warehouseQuantities.find(q => q.warehouseId == currentSelectedWarehouse)?.totalQuantity || 0;
                            }

                            $availableQuantity.val(selectedQty);

                            // Check if available quantity is valid
                            if (selectedQty <= 0) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'No Stock Available',
                                    text: 'No available quantity for this barcode in the selected warehouse.',
                                    confirmButtonColor: '#3085d6',
                                    confirmButtonText: 'OK'
                                });
                                resetForm();
                                return;
                            }

                            // Load racks for the selected warehouse
                            loadRackNos(data.skuName, selectedWarehouseId, data.warehouseQuantities);

                            setTimeout(() => {
                                const selectedRack = $rackNoDropdown.val();
                                if ($productId.val() && selectedWarehouseId && selectedRack) {
                                    // Validate selected rack has stock
                                    const rackHasStock = data.warehouseQuantities.some(q => q.warehouseId == selectedWarehouseId && q.rackNo == selectedRack && q.totalQuantity > 0);
                                    if (!rackHasStock) {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Invalid Rack',
                                            text: `No stock available for rack ${selectedRack} in the selected warehouse.`,
                                            confirmButtonColor: '#3085d6',
                                            confirmButtonText: 'OK'
                                        });
                                        return;
                                    }
                                    autoAddToTable();
                                } else {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Incomplete Data',
                                        text: 'Please ensure a warehouse and rack are selected.',
                                        confirmButtonColor: '#3085d6',
                                        confirmButtonText: 'OK'
                                    });
                                }
                            }, 500);
                        } else {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Invalid Barcode or No Stock',
                                text: 'No product or stock found for this barcode.',
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'OK'
                            });
                            resetForm();
                        }
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Something went wrong while fetching product details.',
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        });
                        resetForm();
                    }
                });
            }
        });

        // ProductName Input Autocomplete
        $productInput.on('input', function () {
            var term = $(this).val().trim();
            selectedIndex = -1;

            if (term.length < 1) {
                $productList.hide().empty();
                return;
            }

            $.ajax({
                url: '/Inventory/GetProductsForStockOut',
                type: 'GET',
                dataType: 'json',
                data: { term: term },
                success: function (data) {
                    $productList.empty();
                    if (data.length === 0) {
                        $productList.hide();
                        return;
                    }

                    $.each(data, function (index, item) {
                        $productList.append(
                            $('<li>').text(item.productName)
                                .attr('data-id', item.id)
                                .attr('data-barcodeNo', item.skuName)
                                .on('click', function () {
                                    $productInput.val(item.productName);
                                    $skuInput.val(item.skuName);
                                    $productId.val(item.id);
                                    $productList.hide().empty();
                                    $warehouseDropdown.trigger('change');
                                })
                        );
                    });

                    $productList.show();
                },
                error: function () {
                    $productList.hide().empty();
                }
            });
        });

        // Product input keyboard navigation
        $productInput.on('keydown', function (e) {
            var items = $productList.find('li');
            if ($productList.is(':visible')) {
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (selectedIndex < items.length - 1) {
                        selectedIndex++;
                        highlightItem(items, selectedIndex);
                    }
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (selectedIndex > 0) {
                        selectedIndex--;
                        highlightItem(items, selectedIndex);
                    }
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (selectedIndex >= 0 && selectedIndex < items.length) {
                        var selected = $(items[selectedIndex]);
                        $productInput.val(selected.text());
                        $productId.val(selected.data('id'));
                        $skuInput.val(selected.data('barcodeNo'));
                        $productList.hide().empty();
                        $warehouseDropdown.trigger('change');
                    }
                }
            }
        });

        // Hide product list when clicking outside
        $(document).on('click', function (e) {
            if (!$(e.target).closest('#product, #productList').length) {
                $productList.hide().empty();
            }
        });

        // Clear product ID and barcode if product input cleared
        $productInput.on('change', function () {
            if ($(this).val().trim() === '') {
                $productId.val('');
                $skuInput.val('');
                $availableQuantity.val('');
                // $rackNoDropdown.empty().append('<option value="">Select Rack</option>');
            }
        });

        // Add button logic
        $('#addButton').on('click', function (e) {
            e.preventDefault();
            autoAddToTable();
        });

        // Add row to table with rack validation
        function autoAddToTable() {
            const barcodeNo = $skuInput.val();
            const productId = $productId.val();
            const productText = $productInput.val();
            const productQuantityVal = parseInt($productQuantity.val()) || 0;
            const reason = $('#reason option:selected').text();
            const warehouseId = $warehouseDropdown.val();
            const warehouseText = $warehouseDropdown.find('option:selected').text();
            const rackNo = $rackNoDropdown.val();
            const stockInQuantity = parseInt($availableQuantity.val()) || 0;

            // Validate required fields
            if (!barcodeNo || !productId || !productQuantityVal || !reason || !warehouseId || !rackNo) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Missing Fields',
                    text: 'Please fill all required fields including Rack No.',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Validate available quantity
            if (stockInQuantity <= 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'No Stock Available',
                    text: 'No available quantity for this barcode in the selected warehouse.',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Validate warehouse + rack + barcode combo exists
            $.ajax({
                url: '/Inventory/CheckStockAvailability',
                type: 'GET',
                data: {
                    sku: barcodeNo,
                    warehouseId: warehouseId,
                    rackNo: rackNo
                },
                success: function (exists) {
                    if (!exists) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Invalid Rack or Warehouse',
                            text: `No stock found for this barcode in selected warehouse and rack ${rackNo}.`,
                            confirmButtonColor: '#3085d6',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    // Proceed to add or update row
                    const table = $('#stockOutTable tbody');
                    let totalQtyForProductWarehouse = 0;
                    table.find('tr').each(function () {
                        const rowProductId = $(this).data('product-id');
                        const rowWarehouseId = $(this).data('warehouse-id');
                        if (rowProductId == productId && rowWarehouseId == warehouseId) {
                            const qtyVal = parseInt($(this).find('input.quantity-input').val()) || 0;
                            totalQtyForProductWarehouse += qtyVal;
                        }
                    });

                    let existingRow = null;
                    table.find('tr').each(function () {
                        const rowBarcode = $(this).find('td:eq(1)').text();
                        const rowProductId = $(this).data('product-id');
                        const rowWarehouseId = $(this).data('warehouse-id');
                        const rowReason = $(this).data('reason');
                        const rowRackNo = $(this).data('rack-no');
                        if (rowBarcode === barcodeNo && rowProductId == productId && rowWarehouseId == warehouseId && rowReason === reason && rowRackNo === rackNo) {
                            existingRow = $(this);
                            return false;
                        }
                    });

                    if (existingRow) {
                        const qtyCell = existingRow.find('td:eq(3)');
                        const currentQty = parseInt(qtyCell.find('input.quantity-input').val()) || 0;
                        const newQty = currentQty + productQuantityVal;
                        const newTotalQty = totalQtyForProductWarehouse - currentQty + newQty;

                        if (newTotalQty > stockInQuantity) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Stock Limit Exceeded',
                                text: `Total quantity cannot exceed available stock of ${stockInQuantity}.`,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'OK'
                            });
                            return;
                        }

                        qtyCell.find('input.quantity-input').val(newQty);
                    } else {
                        const newTotalQty = totalQtyForProductWarehouse + productQuantityVal;
                        if (newTotalQty > stockInQuantity) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Stock Limit Exceeded',
                                text: `Total quantity cannot exceed available stock of ${stockInQuantity}.`,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'OK'
                            });
                            return;
                        }

                        const newRow = `
                            <tr data-product-id="${productId}" data-reason="${reason}" data-warehouse-id="${warehouseId}" data-rack-no="${rackNo}">
                                <td>${serialNumber++}</td>
                                <td>${barcodeNo}</td>
                                <td>${productText}</td>
                                <td>
                                    <div class="input-group input-group-sm">
                                        <input type="number" class="-form-control quantity-input" value="${productQuantityVal}" min="1" style="width: 60px;"
                                            oninput="restrictAndValidateInput(this, ${stockInQuantity}, ${productId}, ${warehouseId})"
                                            onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))">
                                    </div>
                                </td>
                                <td>${reason}</td>
                                <td>${warehouseText}</td>
                                <td>${rackNo}</td>
                                <td><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
                            </tr>
                        `;
                        table.append(newRow);
                    }

                    // Reset form
                    resetForm();
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to validate stock availability.',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }

        // Reset form fields
        function resetForm() {
            $skuInput.val('');
            $productInput.val('');
            $productId.val('');
            $availableQuantity.val('');
            $productQuantity.val('1');
            // $rackNoDropdown.empty().append('<option value="">Select Rack</option>');
            $skuInput.focus();
        }

        // Remove row handler
        $('#stockOutTable').on('click', '.removeRow', function () {
            $(this).closest('tr').remove();
            updateSerialNumbers();
        });

        // Update serial numbers
        function updateSerialNumbers() {
            const rows = $('#stockOutTable tbody tr');
            serialNumber = 1;
            rows.each(function () {
                $(this).find('td:first').text(serialNumber++);
            });
        }

        // Highlight autocomplete item
        function highlightItem(items, index) {
            items.removeClass('highlighted');
            $(items[index]).addClass('highlighted');
        }
    });
</script>




<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@* Start this code for table Quntity TextBox Validation code *@
<script>
        function restrictAndValidateInput(input, stockInQuantity, productId, warehouseId) {
        input.value = input.value.replace(/[^0-9]/g, ''); 
        if (input.value === '' || parseInt(input.value) < 1) {
            //input.value = 1; 
        }

        const table = $('#stockOutTable tbody');
        let totalQtyForProductWarehouse = 0;

        table.find('tr').each(function () {
            const rowProductId = $(this).data('product-id');
            const rowWarehouseId = $(this).data('warehouse-id');
            if (rowProductId == productId && rowWarehouseId == warehouseId) {
                const qtyVal = parseInt($(this).find('input.quantity-input').val()) || 0;
                totalQtyForProductWarehouse += qtyVal;
            }
        });

        if (totalQtyForProductWarehouse > stockInQuantity) {
            const oldValue = input.getAttribute('data-old-value') || 1;
            //alert(`Total quantity for this product and warehouse cannot exceed available stock of ${stockInQuantity}.`);

            // Show sweet alert instead of regular alert
            Swal.fire({
                icon: 'warning',
                title: 'Stock Limit Exceeded',
                text: `Total quantity for this product and warehouse cannot exceed available stock of ${stockInQuantity}.`,
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'OK'
            });
            input.value = oldValue;
            return;
        }
         input.setAttribute('data-old-value', input.value);
    }
</script>
@* Start this code for table Quntity TextBox Validation code *@















<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


@* Start New  Code *@

@* Start This Code For Scan or Enter SKUName & Show The  ProductName or SelectProduct & Show SKUName *@

<script>
    $(document).ready(function () {
        var $productInput = $('#product');
        var $productList = $('#productList');
        var $productId = $('#FkProductId');
        var $skuInput = $('#barcodeNo');
        var selectedIndex = -1;

        // ProductName Input Autocomplete
        $productInput.on('input', function () {
            var term = $(this).val().trim();
            selectedIndex = -1;

            if (term.length < 1) {
                $productList.hide().empty();
                return;
            }

            $.ajax({
                url: '/Inventory/GetProductsForStockOut',
                type: 'GET',
                dataType: 'json',
                data: { term: term },
                success: function (data) {
                    $productList.empty();
                    if (data.length === 0) {
                        $productList.hide();
                        return;
                    }

                    $.each(data, function (index, item) {
                        $productList.append(
                            $('<li>').text(item.productName)
                                .attr('data-id', item.id)
                                .attr('data-barcodeNo', item.skuName)
                                .on('click', function () {
                                    $productInput.val(item.productName);
                                    $skuInput.val(item.skuName); // show SKU
                                    $productId.val(item.id);
                                    $productList.hide().empty();
                                })
                        );
                    });

                    $productList.show();
                },
                error: function () {
                    $productList.hide().empty();
                }
            });
        });

        $productInput.on('keydown', function (e) {
            var items = $productList.find('li');
            if ($productList.is(':visible')) {
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (selectedIndex < items.length - 1) {
                        selectedIndex++;
                        highlightItem(items, selectedIndex);
                    }
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (selectedIndex > 0) {
                        selectedIndex--;
                        highlightItem(items, selectedIndex);
                    }
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    if (selectedIndex >= 0 && selectedIndex < items.length) {
                        var selected = $(items[selectedIndex]);
                        $productInput.val(selected.text());
                        $productId.val(selected.data('id'));
                        $skuInput.val(selected.data('barcodeNo'));
                        $productList.hide().empty();
                    }
                }
            }
        });

        $(document).on('click', function (e) {
            if (!$(e.target).closest('#product, #productList').length) {
                $productList.hide().empty();
            }
        });

        // Handle SKU Input (Scan barcode)
        $skuInput.on('change', function () {
            var barcodeNo = $(this).val().trim();
            if (barcodeNo.length < 1) {
                $productInput.val('');
                $productId.val('');
                return;
            }

            $.ajax({
                url: '/Inventory/GetProductByBarcodeInStockOut',
                type: 'GET',
                data: { barcodeNo: barcodeNo },
                success: function (data) {
                    if (data) {
                        $productInput.val(data.productName);
                        $productId.val(data.productId);
                    } else {
                        $productInput.val('');
                        $productId.val('');
                    }
                },
                error: function () {
                    $productInput.val('');
                    $productId.val('');
                }
            });
        });

        $productInput.on('change', function () {
            if ($(this).val().trim() === '') {
                $productId.val('');
                $skuInput.val('');
            }
        });

        function highlightItem(items, index) {
            items.removeClass('highlighted');
            $(items[index]).addClass('highlighted');
        }
    });
</script>

@* Start This Code For Scan or Enter SKUName & Show The  ProductName or SelectProduct & Show SKUName *@



        @* Start This code for select Warehouse So show the rackno List*@
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#warehouse').change(function () {
                var warehouseId = $(this).val();
                if (warehouseId) {
                    $.ajax({
                        url: '/Inventory/GetRackNosByWarehouse', 
                        type: 'GET',
                        data: { warehouseId: warehouseId },
                        success: function (data) {
                            var $rackNo = $('#rackNo');
                            $rackNo.empty();
                            // $rackNo.append('<option value="">Select Rack No</option>');
                            $.each(data, function (i, item) {
                                $rackNo.append('<option value="' + item.rackNo + '">' + item.rackNo + '</option>');
                            });
                        },
                        error: function () {
                            alert('Failed to load rack numbers');
                        }
                    });
                } else {
                    $('#rackNo').empty().append('<option value="">Select Rack No</option>');
                }
            });

            if ($('#warehouse').val()) {
                $('#warehouse').trigger('change');
            }
        });
    </script>
}
@* End This code for select Warehouse So show the rackno List*@