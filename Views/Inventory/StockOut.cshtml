@using InventoryManagement.ViewModels;
@model StockOutViewModel

<div>
    <div class="row" style="margin-top: -35px; margin-left: -20px;">
        <div class="col-md-12 grid-margin stretch-card">
            <div>
                <div class="card-body">
                   
                    <div class="row" style="margin-bottom: -25px;">
                        <div class="col-md-12 grid-margin">
                            <div class="d-flex justify-content-between flex-wrap">
                                <div class="d-flex align-items-end flex-wrap">
                                    <div class="mr-md-3 mr-xl-5">
                                        <h2>Stock Out</h2>

                                    </div>

                                </div>
                                <div class="d-flex justify-content-between align-items-end flex-wrap">

                                    @* <button class="btn btn-primary mt-2 mt-xl-0" data-bs-toggle="modal" data-bs-target="#excelUploadModal">Upload Excel</button> *@

                                </div>
                            </div>
                            <hr />
                        </div>
                    </div>

                    <form asp-action="StockOut" method="post" id="stockForm" class="forms-sample">

                        <div class="row">

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="barcodeNo">Barcode/ Serial No.</label>
                                    <input type="text" class="form-control" id="barcodeNo" placeholder="BarcodeNo" autofocus>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="product">Product Name</label>
                                    <select asp-for="FkProductId" class="form-control" id="product" asp-items="Model.ProductList" disabled>
                                        <option value="">Select Product</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="reason">Reason</label>
                                    <select class="form-control" id="reason">
                                        <option value="1">Sold</option>
                                        <option value="2">Return</option>
                                        <option value="3">Damage</option>
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="getStockInQuantity">Total Quantity</label>
                                    <input type="text" class="form-control" id="getStockInQuantity" placeholder="StockInQuantity" readonly>
                                </div>
                            </div>


                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="warehouse">Room / Warehouse</label>
                                    <select asp-for="FkWarehouseId" class="form-control" id="warehouse" asp-items="Model.WarehouseList">
                                       @*  <option value="">Select Room/Warehouse</option> *@
                                    </select>
                                </div>
                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="availableQuantity">Available Quantity</label>
                                    <input type="text" id="availableQuantity" class="form-control" readonly />
                                </div>
                            </div>


                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="productQuantity">Stock Out Quantity</label>
                                    <input type="number" class="form-control" id="productQuantity" value="1" placeholder="Quantity" min="1" step="1" oninput="this.value = this.value.replace(/[^0-9]/g, '')">
                                    <small id="quantityError" style="color: red;"></small>
                                </div>
                            </div>

                           @*  <div class="col-md-2">
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary mr-2" style="margin-top: 32px;" id="addButton">+ Add</button>
                                </div>
                            </div> *@

                        </div>



                        <!-- Added Table -->
                        <div class="table-responsive mt-4" style="padding-bottom: 25px;">
                            <table class="table-container" id="stockOutTable">
                                <thead>
                                    <tr>
                                        <th>Sr.No</th>
                                        <th>Barcode Id</th>
                                        <th>Product Name</th>
                                        <th>Product Quantity</th>
                                        <th>Reason</th>
                                        <th>Room / Warehouse</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>


                        <button type="button" class="btn btn-primary mr-2" id="saveStock">Save</button>
                        <button asp-controller="Inventory" asp-action="InventoryList" class="btn btn-light">Cancel</button>
                    </form>
                </div>
            </div>
        </div>


        <!-- Modal For Choose Excel File -->
        <div class="modal fade" id="excelUploadModal" tabindex="-1" aria-labelledby="excelUploadModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title" id="excelUploadModalLabel">Upload Excel File</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
                    </div>

                    <div class="modal-body">
                        <input type="file" id="excelFile" accept=".xls,.xlsx" class="form-control" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" onclick="saveExcelFile()">Save</button>
                    </div>

                </div>
            </div>
        </div>


    </div>
</div>


@* <script>
    document.getElementById('productQuantity').addEventListener('input', function () {
        const enteredQuantity = parseInt(this.value);
        const stockValue = parseInt(document.getElementById('getStockInQuantity').value);
        const errorDiv = document.getElementById('quantityError');

        if (!isNaN(enteredQuantity) && !isNaN(stockValue) && enteredQuantity > stockValue) {
            errorDiv.textContent = `Quantity can't be more than available stock (${stockValue}).`;
        } else {
            errorDiv.textContent = '';
        }
    });
</script> *@


<script>
    document.getElementById('productQuantity').addEventListener('input', function () {
        const enteredQuantity = parseInt(this.value);
        const stockValue = parseInt(document.getElementById('availableQuantity').value);
        const errorDiv = document.getElementById('quantityError');

        if (!isNaN(enteredQuantity) && !isNaN(stockValue) && enteredQuantity > stockValue) {
            errorDiv.textContent = `Quantity can't be more than available stock (${stockValue}).`;
        } else {
            errorDiv.textContent = '';
        }
    });
</script>



@*Start Code for click on AddButton so that time textbox data add in html Table 30/05/2025 *@
@* <script>
    let serialNumber = 1;

    document.getElementById('addButton').addEventListener('click', function(e) {
        e.preventDefault();
        const barcodeNo = document.getElementById('barcodeNo').value;
        const productId = document.getElementById('product').value;
        const productText = document.getElementById('product').options[document.getElementById('product').selectedIndex].text;
        const productQuantity = document.getElementById('productQuantity').value;
        const reason = document.getElementById('reason').options[document.getElementById('reason').selectedIndex].text;
        const warehouseId = document.getElementById('warehouse').value;
        const warehouseText = document.getElementById('warehouse').options[document.getElementById('warehouse').selectedIndex].text;
        const stockInQuantity = parseInt(document.getElementById('availableQuantity').value);
        
        if (!barcodeNo || !productId || !productQuantity || !reason || !warehouseId) {
            alert("Please fill all required fields.");
            return;
        }
        
         if (productQuantity > stockInQuantity) {
            alert(`Quantity cannot exceed available stock of ${stockInQuantity}.`);
            return;
        }

        const table = document.getElementById('stockOutTable').getElementsByTagName('tbody')[0];
        const newRow = table.insertRow();

        newRow.insertCell(0).textContent = serialNumber++;
        newRow.insertCell(1).textContent = barcodeNo;
        newRow.insertCell(2).textContent = productText;
        newRow.insertCell(3).textContent = productQuantity;
        newRow.insertCell(4).textContent = reason;
        newRow.insertCell(5).textContent = warehouseText;

        const removeCell = newRow.insertCell(6);
        const removeButton = document.createElement('button');
        removeButton.textContent = 'Remove';
        removeButton.className = 'btn btn-danger btn-sm';
        removeButton.onclick = function() {
            table.deleteRow(newRow.rowIndex - 1);
            updateSerialNumbers();
        };
        removeCell.appendChild(removeButton);

         newRow.dataset.productId = productId;
         newRow.dataset.reason = reason;
         newRow.dataset.warehouseId = warehouseId;

        document.getElementById('stockForm').reset();
    });

    function updateSerialNumbers() {
        const table = document.getElementById('stockOutTable');
        const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
        serialNumber = 1;
        for (let i = 0; i < rows.length; i++) {
            rows[i].cells[0].textContent = serialNumber++;
        }
    }
</script> *@
@*End Code for click on AddButton so that time textbox data add in html Table 30/05/2025 *@

<script>
    document.getElementById('saveStock').addEventListener('click', function () {
        const rows = document.querySelectorAll("#stockOutTable tbody tr");
        const stockData = [];

        if (rows.length === 0) {
            alert("No items to save.");
            return;
        }

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");

            const stockItem = {
                Barcode: cells[1].textContent.trim(),
                FkProductId: row.dataset.productId,
                Reason: row.dataset.reason,
                // Quantity: cells[3].textContent.trim(),
                Quantity: cells[3].querySelector('input.quantity-input').value.trim(),
                FkWarehouseId: row.dataset.warehouseId
            };

            stockData.push(stockItem);
        });

        fetch("/Inventory/StockOut", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(stockData)
        })
        .then(response => {
            if (response.ok) {
                // alert("Records saved successfully!");
                // location.reload();
                 window.location.href = "/Inventory/InventoryList";
            } else {
                alert("Failed to save records.");
            }
        })
        .catch(error => {
            console.error("Error:", error);
            alert("An error occurred while saving.");
        });
    });
</script>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

@*Start Code for Enter the BarcodeNo and Press Tab Button So that time details show in textbox 30/05/2025 *@

@* <script>

    $(document).ready(function () {
        $('#barcodeNo').on('blur', function () {
            var barcode = $(this).val();
            if (barcode.trim() !== '') {
                $.ajax({
                    url: '/Inventory/GetProductByBarcode', 
                    type: 'GET',
                    data: { barcode: barcode },
                    success: function (response) {
                        if (response) {
                            $('#product').val(response.fkSupplierId);
                            $('#getStockInQuantity').val(response.stockInQuantity);

                            var $warehouseDropdown = $('#warehouse');
                            $warehouseDropdown.empty(); 
                            // $warehouseDropdown.append('<option value="">Select Warehouse</option>');

                            $.each(response.warehouseName, function (index, warehouse) {
                                $warehouseDropdown.append(
                                    $('<option></option>').val(warehouse.id).text(warehouse.name)
                                );
                            });

                            var firstWarehouseId = response.warehouseName[0].id;
                            $warehouseDropdown.val(firstWarehouseId).trigger('change');

                        } else {
                            // alert("No record found for this Barcode.");
                            alert("Please enter barcode in correct format (case-sensitive).");
                        }
                    },
                    error: function () {
                        alert('Something went wrong.');
                    }
                });
            }
        });

        $('#warehouse').on('change', function () {
        var selectedWarehouseId = $(this).val();
        var barcode = $('#barcodeNo').val();

        if (selectedWarehouseId && barcode.trim() !== '') {
            $.ajax({
                url: '/Inventory/GetAvailableQuantity',
                type: 'GET',
                data: {
                    barcode: barcode,
                    warehouseId: selectedWarehouseId
                },
                success: function (quantity) {
                    $('#availableQuantity').val(quantity);
                },
                error: function () {
                    alert('Failed to get available quantity.');
                    $('#availableQuantity').val('');
                }
            });
        } else {
            $('#availableQuantity').val('');
        }
    });
    });
</script> *@

@*End Code for Enter the BarcodeNo and Press Tab Button So that time details show in textbox 30/05/2025 *@



<script>
    let serialNumber = 1;

    $(document).ready(function () {
        $('#barcodeNo').on('keydown', function (e) {
            if (e.key === 'Enter') {
                e.preventDefault(); 

                const barcode = $(this).val().trim();
                if (barcode === '') return;

                $.ajax({
                    url: '/Inventory/GetProductByBarcode',
                    type: 'GET',
                    data: { barcode: barcode },
                    success: function (response) {
                        if (response) {
                            $('#product').val(response.fkSupplierId);
                            $('#getStockInQuantity').val(response.stockInQuantity);

                            const $warehouseDropdown = $('#warehouse');

                           


                            const currentSelectedWarehouse = $warehouseDropdown.val();

                            if (!currentSelectedWarehouse || currentSelectedWarehouse === '') {
                                const firstWarehouseId = response.warehouseQuantities[0].warehouseId;
                                $warehouseDropdown.val(firstWarehouseId).trigger('change');

                                const qty = response.warehouseQuantities.find(q => q.warehouseId == firstWarehouseId)?.totalQuantity || 0;
                                $('#availableQuantity').val(qty);
                            } else {
                                const selectedQty = response.warehouseQuantities.find(q => q.warehouseId == currentSelectedWarehouse)?.totalQuantity || 0;
                                $('#availableQuantity').val(selectedQty);
                            }

                            setTimeout(() => {
                                autoAddToTable();
                            }, 500);
                        } else {
                            alert("Please enter barcode in correct format.");
                            $('#barcodeNo').val('').focus();
                        }
                    },
                    error: function () {
                        alert('Something went wrong.');
                    }
                });
            }
        });

        $('#warehouse').on('change', function () {
            const selectedWarehouseId = $(this).val();
            const barcode = $('#barcodeNo').val();

            if (selectedWarehouseId && barcode.trim() !== '') {
                $.ajax({
                    url: '/Inventory/GetAvailableQuantity',
                    type: 'GET',
                    data: {
                        barcode: barcode,
                        warehouseId: selectedWarehouseId
                    },
                    success: function (quantity) {
                        $('#availableQuantity').val(quantity);
                    },
                    error: function () {
                        alert('Failed to get available quantity.');
                        $('#availableQuantity').val('');
                    }
                });
            } else {
                $('#availableQuantity').val('');
            }
        });

        // Existing + Add button logic (optional if you still want manual add)
        $('#addButton').on('click', function (e) {
            e.preventDefault();
            autoAddToTable();
        });

        //Start Code For use validation for Deferent Deferent Reasone for Qty Validation

        // function autoAddToTable() {
        //     const barcodeNo = $('#barcodeNo').val();
        //     const productId = $('#product').val();
        //     const productText = $('#product option:selected').text();
        //     const productQuantity = $('#productQuantity').val();
        //     const reason = $('#reason option:selected').text();
        //     const warehouseId = $('#warehouse').val();
        //     const warehouseText = $('#warehouse option:selected').text();
        //     const stockInQuantity = parseInt($('#availableQuantity').val());

        //     if (!barcodeNo || !productId || !productQuantity || !reason || !warehouseId) {
        //         alert("Please fill all required fields.");
        //         return;
        //     }

        //     if (parseInt(productQuantity) > stockInQuantity) {
        //         alert(`Quantity cannot exceed available stock of ${stockInQuantity}.`);
        //         return;
        //     }

        //     const table = $('#stockOutTable tbody');

        //     //Start This code for If Scan Same Barcode in Multiples so that time add only first records and other add only +Qty
        //     let existingRow = null;
        //     table.find('tr').each(function () {
        //         const rowBarcode = $(this).find('td:eq(1)').text();
        //         const rowWarehouseId = $(this).data('warehouse-id');
        //         const rowReason = $(this).data('reason');
        //         const rowProductId = $(this).data('product-id');

        //         if (rowBarcode === barcodeNo && 
        //             rowProductId == productId &&
        //             rowWarehouseId == warehouseId &&
        //             rowReason === reason)
        //         {
        //             existingRow = $(this);
        //             return false; 
        //         }
        //     });

        //     if (existingRow) {
        //         const qtyCell = existingRow.find('td:eq(3)');
        //         const currentQty = parseInt(qtyCell.find('input.quantity-input').val()) || 0;
        //         const addedQty = parseInt(productQuantity) || 0;
        //         const newQty = currentQty + addedQty;

        //         if (newQty > stockInQuantity) {
        //             alert(`Quantity cannot exceed available stock of ${stockInQuantity}.`);
        //             return;
        //         }

        //         qtyCell.find('input.quantity-input').val(newQty);
        //     }
        //     else 
        //     {
        //      //End This code for If Scan Same Barcode in Multiples so that time add only first records and other add only +Qty

        //         const newRow = `
        //             <tr data-product-id="${productId}" data-reason="${reason}" data-warehouse-id="${warehouseId}">
        //                 <td>${serialNumber++}</td>
        //                 <td>${barcodeNo}</td>
        //                 <td>${productText}</td>
        //                 <td>
        //                     <div class="input-group input-group-sm">
        //                         <input type="number" class="form-control quantity-input" value="${productQuantity}" min="1" max="${stockInQuantity}" style="width: 60px;">
        //                     </div>
        //                 </td>
        //                 <td>${reason}</td>
        //                 <td>${warehouseText}</td>
        //                 <td><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
        //             </tr>
        //         `;

        //         table.append(newRow);
        //     }

        //     // Reset form except productQuantity (keep 1)
        //     $('#barcodeNo').val('');
        //     $('#availableQuantity').val('');
        //     $('#productQuantity').val('1');
        // }

        //End Code For use validation for Deferent Deferent Reasone for Qty Validation

            function autoAddToTable() {
                const barcodeNo = $('#barcodeNo').val();
                const productId = $('#product').val();
                const productText = $('#product option:selected').text();
                const productQuantity = parseInt($('#productQuantity').val()) || 0;
                const reason = $('#reason option:selected').text();
                const warehouseId = $('#warehouse').val();
                const warehouseText = $('#warehouse option:selected').text();
                const stockInQuantity = parseInt($('#availableQuantity').val());

                if (!barcodeNo || !productId || !productQuantity || !reason || !warehouseId) {
                    alert("Please fill all required fields.");
                    return;
                }

                const table = $('#stockOutTable tbody');

                // 🔍 Calculate total quantity in the table for same productId + warehouseId
                let totalQtyForProductWarehouse = 0;
                table.find('tr').each(function () {
                    const rowProductId = $(this).data('product-id');
                    const rowWarehouseId = $(this).data('warehouse-id');
                    if (rowProductId == productId && rowWarehouseId == warehouseId) {
                        const qtyVal = parseInt($(this).find('input.quantity-input').val()) || 0;
                        totalQtyForProductWarehouse += qtyVal;
                    }
                });

                // 🧠 Find existing row for same barcode + product + warehouse + reason
                let existingRow = null;
                table.find('tr').each(function () {
                    const rowBarcode = $(this).find('td:eq(1)').text();
                    const rowProductId = $(this).data('product-id');
                    const rowWarehouseId = $(this).data('warehouse-id');
                    const rowReason = $(this).data('reason');

                    if (rowBarcode === barcodeNo &&
                        rowProductId == productId &&
                        rowWarehouseId == warehouseId &&
                        rowReason === reason) {
                        existingRow = $(this);
                        return false;
                    }
                });

                if (existingRow) {
                    // Update existing row quantity
                    const qtyCell = existingRow.find('td:eq(3)');
                    const currentQty = parseInt(qtyCell.find('input.quantity-input').val()) || 0;
                    const newQty = currentQty + productQuantity;

                    const newTotalQty = totalQtyForProductWarehouse - currentQty + newQty;

                    if (newTotalQty > stockInQuantity) {
                        alert(`Total quantity for this product and warehouse cannot exceed available stock of ${stockInQuantity}.`);
                        return;
                    }

                    qtyCell.find('input.quantity-input').val(newQty);
                } else {
                    // New row to be added — validate total
                    const newTotalQty = totalQtyForProductWarehouse + productQuantity;

                    if (newTotalQty > stockInQuantity) {
                        alert(`Total quantity for this product and warehouse cannot exceed available stock of ${stockInQuantity}.`);
                        return;
                    }

                    const newRow = `
                        <tr data-product-id="${productId}" data-reason="${reason}" data-warehouse-id="${warehouseId}">
                            <td>${serialNumber++}</td>
                            <td>${barcodeNo}</td>
                            <td>${productText}</td>
                            <td>
                                <div class="input-group input-group-sm">
                                    <input type="number" class="form-control quantity-input" value="${productQuantity}" min="1" max="${stockInQuantity}" style="width: 60px;">
                                </div>
                            </td>
                            <td>${reason}</td>
                            <td>${warehouseText}</td>
                            <td><button type="button" class="btn btn-danger btn-sm removeRow">Remove</button></td>
                        </tr>
                    `;
                    table.append(newRow);
                }

                // Reset form
                $('#barcodeNo').val('');
                $('#availableQuantity').val('');
                $('#productQuantity').val('1');
            }


        // Remove row handler
        $('#stockOutTable').on('click', '.removeRow', function () {
            $(this).closest('tr').remove();
            updateSerialNumbers();
        });

        function updateSerialNumbers() {
            const rows = $('#stockOutTable tbody tr');
            serialNumber = 1;
            rows.each(function () {
                $(this).find('td:first').text(serialNumber++);
            });
        }
    });
</script>






